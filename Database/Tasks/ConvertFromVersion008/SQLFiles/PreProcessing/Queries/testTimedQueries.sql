DROP VIEW IF EXISTS ANAV_RELATIONSHIP_TIMED;

CREATE VIEW ANAV_RELATIONSHIP_TIMED AS 
SELECT 
REL_OID AS ANAV_REL_OID, 
REL_RELATIONSHIP_TYPE_FK AS ANAV_REL_RELATIONSHIP_TYPE_FK, 
a.ATN_OID AS ANAV_REL_CHILD_FK,
b.ATN_OID AS ANAV_REL_PARENT_FK,
a.ATN_STAGE_FK AS ANAV_REL_STAGE
FROM ANA_RELATIONSHIP
JOIN ANA_TIMED_NODE a ON a.ATN_NODE_FK = REL_CHILD_FK
JOIN ANA_TIMED_NODE b ON b.ATN_NODE_FK = REL_PARENT_FK
WHERE a.ATN_STAGE_FK = b.ATN_STAGE_FK
ORDER BY ANAV_REL_STAGE



DROP TABLE IF EXISTS ANAM_TIMED_EDGE;
CREATE TABLE ANAM_TIMED_EDGE (
  AME_T_OID            INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  AME_T_ENTRY_EDGE_ID  INT NOT NULL default '0',
  AME_T_DIRECT_EDGE_ID INT NOT NULL default '0',
  AME_T_EXIT_EDGE_ID   INT NOT NULL default '0',
  AME_T_CHILD_NODE     VARCHAR(64) NOT NULL default ' ',
  AME_T_PARENT_NODE    VARCHAR(64) NOT NULL default ' ',
  AME_T_STAGE          VARCHAR(64) NOT NULL default ' ',
  AME_T_HOPS           INT NOT NULL default '0',
  AME_T_SOURCE         VARCHAR(64) NOT NULL default ' '
) ENGINE=InnoDB DEFAULT CHARSET=latin1;		


SELECT CONCAT("CALL ANASP_ADD_TIMED_EDGE(",
ANAV_REL_CHILD_FK,  ", ",
ANAV_REL_PARENT_FK, ", ",
ANAV_REL_STAGE, ", ",
"\"BUILD TIMED_EDGES by MNW on 2011-12-12\");")
FROM ANAV_RELATIONSHIP_TIMED;


DROP VIEW IF EXISTS ANAV_TIMED_RELATION;
CREATE VIEW ANAV_TIMED_RELATION AS
SELECT
  e.AME_T_OID AS ANAV_T_OID, 
  e.AME_T_ENTRY_EDGE_ID AS ANAV_T_ENTRY_EDGE_ID, 
  e.AME_T_DIRECT_EDGE_ID AS ANAV_T_DIRECT_EDGE_ID, 
  e.AME_T_EXIT_EDGE_ID AS ANAV_T_EXIT_EDGE_ID, 
  e.AME_T_STAGE AS ANAV_T_STAGE, 
  e.AME_T_CHILD_NODE AS ANAV_T_CHILD_ID, 
  a.ATN_PUBLIC_ID AS ANAV_T_CHILD_NAME, 
  c.ANO_COMPONENT_NAME AS ANAV_T_CHILD_DESC, 
  e.AME_T_PARENT_NODE AS ANAV_T_PARENT_ID,
  b.ATN_PUBLIC_ID AS ANAV_T_PARENT_NAME,
  d.ANO_COMPONENT_NAME AS ANAV_T_PARENT_DESC,
  e.AME_T_HOPS AS ANAV_T_HOPS,
  e.AME_T_SOURCE AS ANAV_T_SOURCE
FROM ANAM_TIMED_EDGE e
JOIN ANA_TIMED_NODE AS a ON e.AME_T_CHILD_NODE = a.ATN_OID
JOIN ANA_TIMED_NODE AS b ON e.AME_T_PARENT_NODE = b.ATN_OID
JOIN ANA_NODE AS c ON c.ANO_OID = a.ATN_NODE_FK
JOIN ANA_NODE AS d ON d.ANO_OID = b.ATN_NODE_FK;


DROP VIEW IF EXISTS ANAV_TIMED_GRAND_RELATION;
CREATE VIEW ANAV_TIMED_GRAND_RELATION AS
SELECT
  a.ANAV_T_STAGE as ANAV_STAGE,
  a.ANAV_T_PARENT_ID as ANAV_ID_1,
  a.ANAV_T_PARENT_NAME as ANAV_NAME_1,
  a.ANAV_T_PARENT_DESC as ANAV_DESC_1,
  b.ANAV_T_OID as ANAV_OID_2,
  b.ANAV_T_PARENT_ID as ANAV_ID_2,
  b.ANAV_T_PARENT_NAME as ANAV_NAME_2,
  b.ANAV_T_PARENT_DESC as ANAV_DESC_2,
  b.ANAV_T_CHILD_ID as ANAV_ID_3,
  b.ANAV_T_CHILD_NAME as ANAV_NAME_3,
  b.ANAV_T_CHILD_DESC as ANAV_DESC_3
FROM ANAV_TIMED_RELATION a
JOIN ANAV_TIMED_RELATION b on a.ANAV_T_CHILD_ID = b.ANAV_T_PARENT_ID
WHERE a.ANAV_T_HOPS = 0 
AND b.ANAV_T_HOPS = 0
ORDER BY a.ANAV_T_STAGE, a.ANAV_T_PARENT_NAME, b.ANAV_T_PARENT_DESC;

DROP VIEW IF EXISTS ANAV_TIMED_LEAF_RELATION;
CREATE VIEW ANAV_TIMED_LEAF_RELATION AS
SELECT
  c.STG_NAME AS ANAV_STAGE,
  b.ATN_OID as ANAV_OID_1,
  b.ATN_PUBLIC_ID as ANAV_NAME_1, 
  e.ANO_COMPONENT_NAME as ANAV_DESC_1, 
  a.ATN_OID as ANAV_OID_2, 
  a.ATN_PUBLIC_ID as ANAV_NAME_2, 
  d.ANO_COMPONENT_NAME as ANAV_DESC_2
FROM ANAV_RELATIONSHIP_TIMED
JOIN ANA_TIMED_NODE AS a ON ANAV_REL_CHILD_FK = a.ATN_OID
JOIN ANA_NODE AS d ON a.ATN_NODE_FK = d.ANO_OID
JOIN ANA_TIMED_NODE AS b ON ANAV_REL_PARENT_FK = b.ATN_OID
JOIN ANA_NODE AS e ON b.ATN_NODE_FK = e.ANO_OID
JOIN ANA_STAGE AS c ON c.STG_OID = ANAV_REL_STAGE
WHERE ANAV_REL_CHILD_FK NOT IN (SELECT ANAV_REL_PARENT_FK FROM ANAV_RELATIONSHIP_TIMED)
ORDER BY c.STG_NAME, b.ATN_PUBLIC_ID, d.ANO_COMPONENT_NAME;
