#!/usr/bin/env /usr/bin/python
# -*- coding: iso-8859-1 -*-
#-------------------------------------------------------------------
"""
****************************************
THIS SCRIPT IS NOW OBSOLETE

REPLACED BY DB2OBO METHOD OF DATA ENTRY

MNW, JULY 2009

****************************************


Given a CIOF file and an existing relational anatomy database, this program
generates an SQL script that will synchronise the anatomy database with the
CIOF file, and

The script generated by this program is part of a series of scripts for
converting the existing version of the anatomy database to the next version.
"""

import sys                              # error reporting

import AnatomyBase                      # Anatomy knowledge encode in Python
import CiofStream                       # Read ciof file
import Util                             # debugging/error messages



# ------------------------------------------------------------------
# CONSTANTS / REFERENCE DATA
# ------------------------------------------------------------------


# ------------------------------------------------------------------
# GLOBALS
# ------------------------------------------------------------------


# These are all defined in the configuration file and set by __setConfiguration.
_dbHost = None
_dbName = None
_dbUser = None
_dbPass = None
_versionComments = None
_outputFile = None
_ciofFile = None
_showSynonymOverlapWarnings = False
_debugging = False


# ------------------------------------------------------------------
# LOCAL SUBROUTINES
# ------------------------------------------------------------------

def __setConfiguration(configFilename):
    """
    Read configuration from configuration file.
    """
    global _dbHost, _dbName, _dbUser, _dbPass
    global _versionComments, _outputFile, _ciofFile
    global _debugging

    print "Using Configuration:"
    configFile = open(configFilename, "r")
    line = configFile.readline()
    while line != "":                   # while not at EOF
        if not line[0] in [" ", "#", "\n" ]:   # ignore blank lines and comments
            lineWithoutNewline = line[:-1]
            name, value = lineWithoutNewline.split(" = ")
            if name != "PASSWORD":
                print lineWithoutNewline

            if name == "HOST":
                _dbHost = value
            elif name == "DBNAME":
                _dbName = value
            elif name == "USER":
                _dbUser = value
            elif name == "PASSWORD":
                _dbPass = value
            elif name == "VERSION":
                _versionComments = value
            elif name == "CIOFFILE":
                _ciofFile = value
            elif name == "OUTPUTFILE":
                _outputFile = value
            elif name == "NAME_SYNONYM_OVERLAP_WARNINGS":
                if value.lower() in ["on", "true", "1"]:
                    _showSynonymOverlapWarnings = True
                elif value.lower() not in ["off", "false", "0"]:
                    Util.fatalError([
                        "Unrecognised value for " +
                        "NAME_SYNONYM_OVERLAP_WARNINGS parameter: " + value])
            elif name == "DEBUG":
                if value.lower() in ["on", "true", "1"]:
                    _debugging = True
                elif value.lower() not in ["off", "false", "0"]:
                    Util.fatalError([
                        "Unrecognised value for DEBUG parameter: " + value])
            else:
                Util.fatalError([
                    "Unexpected parameter in the " + configFilename +
                    " configuration file.",
                    "Name: '" + name + ",  Value: '" + value + "'"])
        line = configFile.readline()

    print
    print
    return



# ------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------

# Read in configuration

configFile = sys.argv[1]
__setConfiguration(configFile)
Util.initialise(_debugging)


# Open and read in header of CIOF file.
ciofStream = CiofStream.CiofInputStream(_ciofFile)

# Read knowledge in from database, and prepare for reading in CIOF
AnatomyBase.initialiseKnowledge(ciofStream.getDateTime(),
                                _versionComments, _outputFile,
                                _dbHost, _dbName, _dbUser, _dbPass)

# Read the rest of the CIOF File
entity = ciofStream.getNextEntity()
while entity:
    AnatomyBase.addToKnowledge(entity)
    entity = ciofStream.getNextEntity()

AnatomyBase.dealWithTcFallout() # TC entries require post-processing.

AnatomyBase.readDb()          # Read in corresponding data from database
AnatomyBase.exportKnowledge() # dump it in DB format

# Perform final analysis and report any potential problems.
AnatomyBase.genReport(_showSynonymOverlapWarnings)

AnatomyBase.finalise()
