#!/usr/bin/env /usr/bin/python
# -*- coding: iso-8859-1 -*-
"""
****************************************
THIS SCRIPT IS NOW OBSOLETE

REPLACED BY DB2OBO METHOD OF DATA ENTRY

MNW, JULY 2009

****************************************

Read in an OBO file, which consists of a header plus a stream of OboEntries.
"""

import OboEntry
import OboLine

# ------------------------------------------------------------------
# CONSTANTS / REFERENCE DATA
# ------------------------------------------------------------------



# ------------------------------------------------------------------
# OBO HEADER
# ------------------------------------------------------------------

class OboHeader:
    """
    OBO files have a header with file-wide information in it.  Headers
    occur at the very front of the file.
    """

    def __init__(self, stream):
        """
        Create an OBO Header object, given an OBO Input Stream positioned
        at the start of the header.
        """
        self.__stream = stream
        self.__formatVersionLine = OboLine.createLine(
            stream.readline(), OboLine.FORMAT_VERSION )
        self.__dateLine = OboLine.createLine(
            stream.readline(), OboLine.DATE)
        self.__savedByLine = OboLine.createLine(
            stream.readline(), OboLine.SAVED_BY)
        self.__autoGeneratedByLine = OboLine.createLine(
            stream.readline(), OboLine.AUTO_GENERATED_BY)
        self.__subsetdefLine = OboLine.createLine(
            stream.readline(), OboLine.SUBSETDEF)
        self.__defaultNamespaceLine = OboLine.createLine(
            stream.readline(), OboLine.DEFAULT_NAMESPACE)

        return

    def __getFormatVersionLine(self):
        """
        Return the format version line from the header.  For example:

            format-version: 1.0
        """
        return self.__formatVersionLine


    def getFormatVersion(self):
        """
        Return the version of this file.
        """
        return self.__getFormatVersionLine().getValue()


    def __getDateLine(self):
        """
        Return the format version line from the header.  For example:

            date: 11:05:2007 14:29
        """
        return self.__dateLine


    def getDate(self):
        """
        Return the date the file was generated.

        Date returned as a string:
          DD:MM:YYYY HH:MM
        """
        return self.__getDateLine().getValue()


    def __getSavedByLine(self):
        """
        Return the saved by line from the header.  Has the format:

            saved-by: Erik Segerdell
        """
        return self.__savedByLine

    def getSavedBy(self):
        """
        Return the name of the person this file was created by.
        """
        return self.__getSavedByLine().getValue()


    def __getSubsetdefLine(self):
        """
        Return the subset definition line from the header.  For example:

            subsetdef: anatomical_site_slim "Anatomical Site slim"

        :TODO: It might be possible for files not to contain any subset
        defintions or for them to contain many subset definitions.  This
        code deals with neither possibility.
        """
        return self.__subsetdefLine


    def getSubssetDefId(self):
        """
        Return the ID of the subset.  This ID is used in the OBO file
        to indicate what terms belong to the subset.
        """
        return self.__getSubsetdefLine().getId()



    def __getDefaultNamespaceLine(self):
        """
        Return the default namespace line from the header.  Has the format:

            default-namespace: xenopus_anatomy
        """
        return self.__defaultNamespaceLine

    def getDefaultNamespace(self):
        """
        Return the default namespace for this file.  Individual terms can
        override this by specifying a namespace.
        """
        return self.__getDefaultNamespaceLine().getValue()



    def spew(self, label = ""):
        """
        Debugging routine to spew the contents of the header.
        """
        print "Spewing OBO Header:", label
        print "Format Version:", self.getFormatVersion()
        print "Date:", self.getDate()
        print "Saved by:", self.getSavedBy()
        print "Subsetdef ID:", self.getSubssetDefId()
        print "Default Namespace:", self.getDefaultNamespace()
        print

        return



# ------------------------------------------------------------------
# OBO STREAM
# ------------------------------------------------------------------


class OboInputStream:
    """
    An OBO file stream reader.
    """

    def __init__(self, fileName):
        """
        An OBO file contains a header followed by a stream of OBO entries.
        """
        # open file, get and validate header
        self.__stream = open(fileName, "r")
        self.__header = OboHeader(self.__stream)

        return

    def getHeader(self):
        """
        Return the header for the OBO Input Stream
        """
        return self.__header


    def getInputStream(self):
        """
        Return the input stream the OBO input stream is reading from.
        """
        return self.__stream



    def getNextEntry(self):
        """
        Read the next OBO entity in the OboInputStream.  Return an
        entry of type EOF if at end of file.
        """
        return OboEntry.OboEntry(oboInputStream = self)



